/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è popup –æ–∫–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
 */

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const elements = {
  apiStatus: document.getElementById('apiStatus'),
  openCurrentThread: document.getElementById('openCurrentThread'),
  downloadCurrentThread: document.getElementById('downloadCurrentThread'),
  recentDownloads: document.getElementById('recentDownloads'),
  openOptions: document.getElementById('openOptions'),
  openHelp: document.getElementById('openHelp')
};

// –¢–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞
let currentTab = null;

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
 */
async function checkAndUpdateDownloadStatus() {
  try {
    const result = await chrome.storage.local.get(['recentDownloads']);
    let recentDownloads = result.recentDownloads || [];
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
    const settings = await chrome.storage.sync.get(['apiUrl']);
    const apiUrl = settings.apiUrl || 'http://localhost/api';
    
    let updated = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'progress'
    for (let i = 0; i < recentDownloads.length; i++) {
      const download = recentDownloads[i];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
      if (download.status === 'progress') {
        try {
          const statusUrl = `${apiUrl}/status/${download.threadId}`;
          const response = await fetch(statusUrl);
          
          if (response.ok) {
            const data = await response.json();
            
            if (data.state === 'SUCCESS') {
              recentDownloads[i].status = 'success';
              updated = true;
            } else if (data.state === 'FAILURE') {
              recentDownloads[i].status = 'error';
              updated = true;
            }
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–¥–∞ ${download.threadId}:`, error);
        }
      }
    }
    
    // –ï—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    if (updated) {
      await chrome.storage.local.set({ recentDownloads });
      await loadRecentDownloads();
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–æ–∫:', error);
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è popup
 */
async function init() {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
  const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
  currentTab = tabs[0];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API
  await checkApiStatus();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  updateUIForCurrentTab();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–æ–∫
  await checkAndUpdateDownloadStatus();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  loadRecentDownloads();
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  setupEventHandlers();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  setInterval(checkAndUpdateDownloadStatus, 10000); // –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
 */
async function checkApiStatus() {
  try {
    const settings = await chrome.storage.sync.get(['apiUrl']);
    const apiUrl = settings.apiUrl || 'http://localhost/api';
    
    updateApiStatus('checking');
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API
    const response = await fetch(`${apiUrl}/health`, {
      method: 'GET',
      mode: 'cors',
      cache: 'no-cache'
    });
    
    if (response.ok) {
      updateApiStatus('online');
    } else {
      updateApiStatus('error');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API:', error);
    updateApiStatus('offline');
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ API
 */
function updateApiStatus(status) {
  const statusDot = elements.apiStatus.querySelector('.status-dot');
  const statusText = elements.apiStatus.querySelector('.status-text');
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å—Ç–∞—Ç—É—Å–∞
  statusDot.className = 'status-dot';
  
  switch (status) {
    case 'checking':
      statusDot.classList.add('checking');
      statusText.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
      break;
    case 'online':
      statusDot.classList.add('online');
      statusText.textContent = 'API –¥–æ—Å—Ç—É–ø–µ–Ω';
      break;
    case 'offline':
      statusDot.classList.add('offline');
      statusText.textContent = 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      break;
    case 'error':
      statusDot.classList.add('error');
      statusText.textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
      break;
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
 */
function updateUIForCurrentTab() {
  if (!currentTab) return;
  
  const is2chThread = currentTab.url && 
                     currentTab.url.includes('2ch.hk') && 
                     currentTab.url.includes('/res/');
  
  if (is2chThread) {
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç—Ä–µ–¥–∞ 2ch
    elements.openCurrentThread.disabled = false;
    elements.downloadCurrentThread.disabled = false;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–¥–µ –∏–∑ URL
    const match = currentTab.url.match(/2ch\.hk\/([^\/]+)\/res\/(\d+)/);
    if (match) {
      const boardId = match[1];
      const threadId = match[2];
      elements.openCurrentThread.textContent = `üìÑ –û—Ç–∫—Ä—ã—Ç—å /${boardId}/${threadId}`;
    }
  } else {
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—Ä–µ–¥–∞
    elements.openCurrentThread.disabled = true;
    elements.downloadCurrentThread.disabled = true;
    elements.openCurrentThread.textContent = 'üìÑ –ù–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—Ä–µ–¥–∞';
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–¥–∞
 * @param {string} boardId - ID –¥–æ—Å–∫–∏
 * @param {string} threadId - ID —Ç—Ä–µ–¥–∞
 * @returns {string} –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function getThreadFirstMessage(boardId, threadId) {
  try {
    const settings = await chrome.storage.sync.get(['apiUrl']);
    const apiUrl = settings.apiUrl || 'http://localhost/api';
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞—à–µ–≥–æ API (–¥–ª—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤)
    try {
      const response = await fetch(`${apiUrl}/thread/${threadId}`, {
        method: 'GET',
        mode: 'cors',
        cache: 'default'
      });
      
      if (response.ok) {
        const data = await response.json();
        
        // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (data.posts && data.posts.length > 0) {
          const firstPost = data.posts[0];
          let message = firstPost.comment || '';
          
          // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
          message = message.replace(/<[^>]*>/g, '');
          
          // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
          message = message.replace(/\s+/g, ' ').trim();
          
          // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤
          if (message.length > 50) {
            message = message.substring(0, 47) + '...';
          }
          
          return message;
        }
      }
    } catch (localError) {
      console.log(`–¢—Ä–µ–¥ ${threadId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º API, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å 2ch.hk`);
    }
    
    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑ –Ω–∞—à–µ–≥–æ API, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å 2ch.hk
    try {
      const response = await fetch(`https://2ch.hk/${boardId}/res/${threadId}.json`, {
        method: 'GET',
        mode: 'cors',
        cache: 'default'
      });
      
      if (response.ok) {
        const data = await response.json();
        
        // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤–µ threads->posts
        if (data.threads && data.threads.length > 0 && data.threads[0].posts && data.threads[0].posts.length > 0) {
          const firstPost = data.threads[0].posts[0];
          let message = firstPost.comment || '';
          
          // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
          message = message.replace(/<[^>]*>/g, '');
          
          // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
          message = message.replace(/\s+/g, ' ').trim();
          
          // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤
          if (message.length > 50) {
            message = message.substring(0, 47) + '...';
          }
          
          return message;
        }
      }
    } catch (remoteError) {
      console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–¥–∞ ${threadId} —Å 2ch.hk:`, remoteError);
    }
    
    return '';
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ ${threadId}:`, error);
    return '';
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫
 */
async function loadRecentDownloads() {
  try {
    const result = await chrome.storage.local.get(['recentDownloads']);
    const recentDownloads = result.recentDownloads || [];
    
    if (recentDownloads.length === 0) {
      elements.recentDownloads.innerHTML = '<p class="empty-message">–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫</p>';
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    const downloadsHtml = recentDownloads
      .slice(0, 5)
      .map(download => {
        const messageText = download.firstMessage ? ` - ${download.firstMessage}` : '';
        return `
        <div class="recent-item clickable" data-board-id="${download.boardId}" data-thread-id="${download.threadId}">
          <div class="recent-info">
            <span class="thread-id-with-message">
              <span class="thread-id">/${download.boardId}/${download.threadId}</span>
              <span class="thread-message loaded">${messageText}</span>
            </span>
            <span class="download-time">${formatTime(download.timestamp)}</span>
          </div>
          <span class="download-status ${download.status}">${getStatusText(download.status)}</span>
        </div>
      `;
      })
      .join('');
    
    elements.recentDownloads.innerHTML = downloadsHtml;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–¥–æ–≤
    setupRecentItemsClickHandlers();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö —Ç—Ä–µ–¥–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –∏—Ö –Ω–µ—Ç
    recentDownloads.slice(0, 5).forEach(async (download, index) => {
      if (!download.firstMessage) {
        const messageElement = document.querySelector(`[data-thread-id="${download.threadId}"] .thread-message`);
        if (messageElement) {
          messageElement.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
          messageElement.classList.remove('loaded');
          
          const firstMessage = await getThreadFirstMessage(download.boardId, download.threadId);
          if (firstMessage) {
            messageElement.textContent = ` - ${firstMessage}`;
            messageElement.classList.add('loaded');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            const result = await chrome.storage.local.get(['recentDownloads']);
            let cachedDownloads = result.recentDownloads || [];
            const downloadIndex = cachedDownloads.findIndex(d => 
              d.threadId === download.threadId && d.boardId === download.boardId
            );
            if (downloadIndex !== -1) {
              cachedDownloads[downloadIndex].firstMessage = firstMessage;
              await chrome.storage.local.set({ recentDownloads: cachedDownloads });
            }
          } else {
            messageElement.textContent = '';
            messageElement.classList.add('loaded');
          }
        }
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:', error);
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
 */
function formatTime(timestamp) {
  const date = new Date(timestamp);
  const now = new Date();
  const diff = now - date;
  
  if (diff < 60000) { // –ú–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã
    return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
  } else if (diff < 3600000) { // –ú–µ–Ω—å—à–µ —á–∞—Å–∞
    const minutes = Math.floor(diff / 60000);
    return `${minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
  } else if (diff < 86400000) { // –ú–µ–Ω—å—à–µ —Å—É—Ç–æ–∫
    const hours = Math.floor(diff / 3600000);
    return `${hours} —á. –Ω–∞–∑–∞–¥`;
  } else {
    return date.toLocaleDateString('ru-RU');
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
 */
function getStatusText(status) {
  const statusMap = {
    'pending': '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ',
    'progress': 'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞',
    'success': '‚úÖ –ì–æ—Ç–æ–≤–æ',
    'error': '‚ùå –û—à–∏–±–∫–∞'
  };
  return statusMap[status] || status;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventHandlers() {
  // –û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–¥
  elements.openCurrentThread.addEventListener('click', async () => {
    if (!currentTab) return;
    
    const match = currentTab.url.match(/2ch\.hk\/([^\/]+)\/res\/(\d+)/);
    if (match) {
      const boardId = match[1];
      const threadId = match[2];
      
      // –ü–æ–ª—É—á–∞–µ–º URL –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
      const settings = await chrome.storage.sync.get(['apiUrl']);
      const apiUrl = settings.apiUrl || 'http://localhost/api';
      const serverUrl = apiUrl.replace('/api', '');
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–µ–¥ –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ
      chrome.tabs.create({
        url: `${serverUrl}/b/res/${threadId}.html`
      });
    }
  });
  
  // –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–¥
  elements.downloadCurrentThread.addEventListener('click', async () => {
    if (!currentTab) return;
    
    const match = currentTab.url.match(/2ch\.hk\/([^\/]+)\/res\/(\d+)/);
    if (match) {
      const boardId = match[1];
      const threadId = match[2];
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      try {
        elements.downloadCurrentThread.disabled = true;
        elements.downloadCurrentThread.textContent = '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...';
        
        const response = await chrome.runtime.sendMessage({
          action: 'downloadThread',
          threadId: threadId,
          boardId: boardId
        });
        
        if (response.success) {
          elements.downloadCurrentThread.textContent = '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ';
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
          await saveToHistory(boardId, threadId, 'pending');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
          await loadRecentDownloads();
          
          setTimeout(() => {
            elements.downloadCurrentThread.textContent = 'üì• –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–¥';
            elements.downloadCurrentThread.disabled = false;
          }, 2000);
        } else {
          throw new Error(response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:', error);
        elements.downloadCurrentThread.textContent = '‚ùå –û—à–∏–±–∫–∞';
        setTimeout(() => {
          elements.downloadCurrentThread.textContent = 'üì• –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–¥';
          elements.downloadCurrentThread.disabled = false;
        }, 2000);
      }
    }
  });
  
  // –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  elements.openOptions.addEventListener('click', (e) => {
    e.preventDefault();
    chrome.runtime.openOptionsPage();
  });
  
  // –û—Ç–∫—Ä—ã—Ç—å –ø–æ–º–æ—â—å
  elements.openHelp.addEventListener('click', (e) => {
    e.preventDefault();
    chrome.tabs.create({
      url: 'https://github.com/your-repo/wiki'
    });
  });
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫
 */
async function saveToHistory(boardId, threadId, status) {
  try {
    const result = await chrome.storage.local.get(['recentDownloads']);
    let recentDownloads = result.recentDownloads || [];
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–¥–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const firstMessage = await getThreadFirstMessage(boardId, threadId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ
    recentDownloads.unshift({
      boardId: boardId,
      threadId: threadId,
      status: status,
      timestamp: Date.now(),
      firstMessage: firstMessage || '' // –ö—ç—à–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    });
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
    recentDownloads = recentDownloads.slice(0, 20);
    
    await chrome.storage.local.set({ recentDownloads });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é:', error);
  }
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–∫–æ–≤ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫
 */
function setupRecentItemsClickHandlers() {
  document.querySelectorAll('.recent-item.clickable').forEach(item => {
    item.addEventListener('click', async () => {
      const boardId = item.dataset.boardId;
      const threadId = item.dataset.threadId;
      
      // –ü–æ–ª—É—á–∞–µ–º URL –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
      const settings = await chrome.storage.sync.get(['apiUrl']);
      const apiUrl = settings.apiUrl || 'http://localhost/api';
      const serverUrl = apiUrl.replace('/api', '');
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–µ–¥ –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ
      chrome.tabs.create({
        url: `${serverUrl}/b/res/${threadId}.html`
      });
    });
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
init(); 